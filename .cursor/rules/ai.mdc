---
description: 
globs: 
alwaysApply: false
---
Modular Development: Keep each agent's code separate and focused on a single responsibility, as you've already done with the Incident Analysis Agent.
Documentation First: Document the purpose, inputs, outputs, and expected behavior of each agent before coding.
Test-Driven Development: Write tests before implementation, like your thorough test coverage for the analyzer.py file.
Dependency Injection: Make dependencies explicit and injectable to facilitate testing and flexibility.
Error Handling: Implement comprehensive error handling with graceful degradation, as you've done in the Incident Agent.
Versioning: Include version information in agent responses to track which model version produced results.
Logging: Maintain detailed logging for debugging and performance tracking.
Configuration Externalization: Keep model parameters and endpoints in configuration files.
2. Code Consistency Improvements
Style Standardization

Implement consistent import ordering (stdlib, third-party, local)
Standardize docstring format (currently mixed styles)
Apply consistent error handling patterns across all modules

Logging Enhancement

Implement structured logging throughout all components
Add log rotation configuration
Create consistent log levels for different types of events

3. Technical Debt Reduction
Remove Deprecated Patterns

Address DeprecationWarning for FastAPI on_event in incident agent (mentioned in your TODOs)
Update httpx client usage to follow current best practices

Configuration Management

Centralize environment variable handling
Create a unified configuration system across components

4. Code Quality Improvements
Error Handling

Implement more robust error handling in MCP's router
Add proper validation for all incoming messages
Create consistent error response formats

Testing Enhancements

Increase test coverage for edge cases
Add performance-focused tests for Redis caching
Implement integration tests between components